/*
 * Copyright 2020 Hippo B.V. (http://www.onehippo.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, Input, Optional, TemplateRef, ViewContainerRef, } from '@angular/core';
import { isComponent } from '@bloomreach/spa-sdk';
import { BrNodeDirective } from './br-node.directive';
import { BrPageComponent } from './br-page/br-page.component';
/**
 * The brXM component.
 */
export class BrComponentDirective {
    constructor(container, template, node, page) {
        this.container = container;
        this.template = template;
        this.node = node;
        this.page = page;
    }
    ngOnChanges(changes) {
        if (!changes.component || changes.component.isFirstChange()) {
            return;
        }
        this.ngOnDestroy();
        this.ngOnInit();
    }
    ngOnDestroy() {
        this.container.clear();
    }
    ngOnInit() {
        var _a, _b;
        const page = (_a = this.page) === null || _a === void 0 ? void 0 : _a.state.getValue();
        if (!page) {
            return;
        }
        // tslint:disable: no-non-null-assertion
        (_b = this.components) === null || _b === void 0 ? void 0 : _b.forEach((component) => this.container.createEmbeddedView(this.page.node, {
            component,
            page,
            $implicit: component,
            template: this.template,
        }));
        // tslint:enable: no-non-null-assertion
    }
    get context() {
        var _a, _b;
        if (this.node) {
            return this.node.component;
        }
        return (_b = (_a = this.page) === null || _a === void 0 ? void 0 : _a.state.getValue()) === null || _b === void 0 ? void 0 : _b.getComponent();
    }
    get components() {
        var _a, _b;
        if (isComponent(this.component)) {
            return [this.component];
        }
        if (!this.component) {
            return (_a = this.context) === null || _a === void 0 ? void 0 : _a.getChildren();
        }
        const component = (_b = this.context) === null || _b === void 0 ? void 0 : _b.getComponent(...this.component.split('/'));
        return component && [component];
    }
}
BrComponentDirective.decorators = [
    { type: Directive, args: [{ selector: '[brComponent]' },] }
];
BrComponentDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: TemplateRef, decorators: [{ type: Optional }] },
    { type: BrNodeDirective, decorators: [{ type: Optional }] },
    { type: BrPageComponent, decorators: [{ type: Optional }] }
];
BrComponentDirective.propDecorators = {
    component: [{ type: Input, args: ['brComponent',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnItY29tcG9uZW50LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9zcmMvIiwic291cmNlcyI6WyJsaWIvYnItY29tcG9uZW50LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FjRztBQUVILE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUlMLFFBQVEsRUFFUixXQUFXLEVBQ1gsZ0JBQWdCLEdBQ2pCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxXQUFXLEVBQW1CLE1BQU0scUJBQXFCLENBQUM7QUFDbkUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQXNCOUQ7O0dBRUc7QUFFSCxNQUFNLE9BQU8sb0JBQW9CO0lBUy9CLFlBQ1UsU0FBMkIsRUFDZixRQUEwQyxFQUMxQyxJQUFzQixFQUN0QixJQUFzQjtRQUhsQyxjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQUNmLGFBQVEsR0FBUixRQUFRLENBQWtDO1FBQzFDLFNBQUksR0FBSixJQUFJLENBQWtCO1FBQ3RCLFNBQUksR0FBSixJQUFJLENBQWtCO0lBQ3pDLENBQUM7SUFFSixXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsRUFBRTtZQUMzRCxPQUFPO1NBQ1I7UUFFRCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQsUUFBUTs7UUFDTixNQUFNLElBQUksU0FBRyxJQUFJLENBQUMsSUFBSSwwQ0FBRSxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFekMsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNULE9BQU87U0FDUjtRQUVELHdDQUF3QztRQUN4QyxNQUFBLElBQUksQ0FBQyxVQUFVLDBDQUFFLE9BQU8sQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSyxDQUFDLElBQUksRUFBRTtZQUN6RixTQUFTO1lBQ1QsSUFBSTtZQUNKLFNBQVMsRUFBRSxTQUFTO1lBQ3BCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtTQUN4QixDQUFDLEVBQUU7UUFDSix1Q0FBdUM7SUFDekMsQ0FBQztJQUVELElBQVksT0FBTzs7UUFDakIsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2IsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztTQUM1QjtRQUVELG1CQUFPLElBQUksQ0FBQyxJQUFJLDBDQUFFLEtBQUssQ0FBQyxRQUFRLDRDQUFJLFlBQVksR0FBRztJQUNyRCxDQUFDO0lBRUQsSUFBWSxVQUFVOztRQUNwQixJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDL0IsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUN6QjtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ25CLGFBQU8sSUFBSSxDQUFDLE9BQU8sMENBQUUsV0FBVyxHQUFHO1NBQ3BDO1FBRUQsTUFBTSxTQUFTLFNBQUcsSUFBSSxDQUFDLE9BQU8sMENBQUUsWUFBWSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUUzRSxPQUFPLFNBQVMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7OztZQW5FRixTQUFTLFNBQUMsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFOzs7WUE3QnRDLGdCQUFnQjtZQURoQixXQUFXLHVCQTBDUixRQUFRO1lBdENKLGVBQWUsdUJBdUNuQixRQUFRO1lBdENKLGVBQWUsdUJBdUNuQixRQUFROzs7d0JBTlYsS0FBSyxTQUFDLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMjAgSGlwcG8gQi5WLiAoaHR0cDovL3d3dy5vbmVoaXBwby5jb20pXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPcHRpb25hbCxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgVGVtcGxhdGVSZWYsXG4gIFZpZXdDb250YWluZXJSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNDb21wb25lbnQsIENvbXBvbmVudCwgUGFnZSB9IGZyb20gJ0BibG9vbXJlYWNoL3NwYS1zZGsnO1xuaW1wb3J0IHsgQnJOb2RlRGlyZWN0aXZlIH0gZnJvbSAnLi9ici1ub2RlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBCclBhZ2VDb21wb25lbnQgfSBmcm9tICcuL2JyLXBhZ2UvYnItcGFnZS5jb21wb25lbnQnO1xuXG4vKipcbiAqIFRoZSB0ZW1wbGF0ZSBjb250ZXh0IGhvbGRpbmcgdGhlIGN1cnJlbnQgYnJYTSBDb21wb25lbnQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQnJDb21wb25lbnRDb250ZXh0IHtcbiAgLyoqXG4gICAqIFRoZSBpbXBsaWNpdCB2YWx1ZSBvZiB0aGUgY29udGV4dCBpcyBwb2ludGluZyB0byB0aGUgY3VycmVudCBjb21wb25lbnQuXG4gICAqL1xuICAkaW1wbGljaXQ6IENvbXBvbmVudDtcblxuICAvKipcbiAgICogVGhlIGN1cnJlbnQgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBDb21wb25lbnQ7XG5cbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IHBhZ2UuXG4gICAqL1xuICBwYWdlOiBQYWdlO1xufVxuXG4vKipcbiAqIFRoZSBiclhNIGNvbXBvbmVudC5cbiAqL1xuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW2JyQ29tcG9uZW50XScgfSlcbmV4cG9ydCBjbGFzcyBCckNvbXBvbmVudERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQge1xuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCBpbnN0YW5jZSBvciBhIHBhdGggdG8gYSBjb21wb25lbnQuXG4gICAqIFRoZSBwYXRoIGlzIGRlZmluZWQgYXMgYSBzbGFzaC1zZXBhcmF0ZWQgY29tcG9uZW50cyBuYW1lIGNoYWluXG4gICAqIHJlbGF0aXZlIHRvIHRoZSBjdXJyZW50IGNvbXBvbmVudCAoZS5nLiBgbWFpbi9jb250YWluZXJgKS5cbiAgICogSWYgaXQgaXMgb21pdHRlZCwgYWxsIHRoZSBjaGlsZHJlbiB3aWxsIGJlIHJlbmRlcmVkLlxuICAgKi9cbiAgQElucHV0KCdickNvbXBvbmVudCcpIGNvbXBvbmVudD86IENvbXBvbmVudCB8IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGNvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIHRlbXBsYXRlPzogVGVtcGxhdGVSZWY8QnJDb21wb25lbnRDb250ZXh0PixcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIG5vZGU/OiBCck5vZGVEaXJlY3RpdmUsXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBwYWdlPzogQnJQYWdlQ29tcG9uZW50LFxuICApIHt9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmICghY2hhbmdlcy5jb21wb25lbnQgfHwgY2hhbmdlcy5jb21wb25lbnQuaXNGaXJzdENoYW5nZSgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5uZ09uRGVzdHJveSgpO1xuICAgIHRoaXMubmdPbkluaXQoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuY29udGFpbmVyLmNsZWFyKCk7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBjb25zdCBwYWdlID0gdGhpcy5wYWdlPy5zdGF0ZS5nZXRWYWx1ZSgpO1xuXG4gICAgaWYgKCFwYWdlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gdHNsaW50OmRpc2FibGU6IG5vLW5vbi1udWxsLWFzc2VydGlvblxuICAgIHRoaXMuY29tcG9uZW50cz8uZm9yRWFjaCgoY29tcG9uZW50KSA9PiB0aGlzLmNvbnRhaW5lci5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy5wYWdlIS5ub2RlLCB7XG4gICAgICBjb21wb25lbnQsXG4gICAgICBwYWdlLFxuICAgICAgJGltcGxpY2l0OiBjb21wb25lbnQsXG4gICAgICB0ZW1wbGF0ZTogdGhpcy50ZW1wbGF0ZSxcbiAgICB9KSk7XG4gICAgLy8gdHNsaW50OmVuYWJsZTogbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gIH1cblxuICBwcml2YXRlIGdldCBjb250ZXh0KCk6IENvbXBvbmVudCB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHRoaXMubm9kZSkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZS5jb21wb25lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucGFnZT8uc3RhdGUuZ2V0VmFsdWUoKT8uZ2V0Q29tcG9uZW50KCk7XG4gIH1cblxuICBwcml2YXRlIGdldCBjb21wb25lbnRzKCk6IENvbXBvbmVudFtdIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAoaXNDb21wb25lbnQodGhpcy5jb21wb25lbnQpKSB7XG4gICAgICByZXR1cm4gW3RoaXMuY29tcG9uZW50XTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuY29tcG9uZW50KSB7XG4gICAgICByZXR1cm4gdGhpcy5jb250ZXh0Py5nZXRDaGlsZHJlbigpO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbXBvbmVudCA9IHRoaXMuY29udGV4dD8uZ2V0Q29tcG9uZW50KC4uLnRoaXMuY29tcG9uZW50LnNwbGl0KCcvJykpO1xuXG4gICAgcmV0dXJuIGNvbXBvbmVudCAmJiBbY29tcG9uZW50XTtcbiAgfVxufVxuIl19