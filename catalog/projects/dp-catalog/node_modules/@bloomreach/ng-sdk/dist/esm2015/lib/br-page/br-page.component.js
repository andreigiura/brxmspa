/*
 * Copyright 2020 Hippo B.V. (http://www.onehippo.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ChangeDetectorRef, ChangeDetectionStrategy, Component, ContentChild, Inject, Input, NgZone, Output, Optional, PLATFORM_ID, TemplateRef, ViewChild, } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { isPlatformBrowser, isPlatformServer } from '@angular/common';
import { makeStateKey, TransferState } from '@angular/platform-browser';
import { from, of, BehaviorSubject, Subject } from 'rxjs';
import { filter, map, mapTo, pairwise, pluck, switchMap, take } from 'rxjs/operators';
import { destroy, initialize, isPage } from '@bloomreach/spa-sdk';
/**
 * The brXM page.
 */
export class BrPageComponent {
    constructor(changeDetectorRef, httpClient, zone, platform, transferState) {
        this.changeDetectorRef = changeDetectorRef;
        this.httpClient = httpClient;
        this.platform = platform;
        this.transferState = transferState;
        /**
         * The brXM and Angular components mapping.
         */
        this.mapping = {};
        /**
         * The TransferState key is used to transfer the state from the server-side to the client-side.
         * By default, it equals to `brPage`.
         * If `false` is passed then the state transferring feature will be disabled.
         */
        this.stateKey = makeStateKey('brPage');
        /**
         * The current state of the page component.
         */
        this.state = new BehaviorSubject(undefined);
        this.afterContentChecked$ = new Subject();
        this.request = this.request.bind(this);
        this.state.pipe(pairwise(), pluck(0), filter(isPage))
            .subscribe(destroy);
        this.state.pipe(filter(isPage), switchMap((page) => this.afterContentChecked$.pipe(take(1), mapTo(page))))
            .subscribe((page) => zone.runOutsideAngular(() => page.sync()));
        this.state.pipe(filter(() => isPlatformServer(this.platform)), filter(isPage))
            .subscribe((page) => { var _a; return this.stateKey && ((_a = this.transferState) === null || _a === void 0 ? void 0 : _a.set(this.stateKey, page.toJSON())); });
    }
    get context() {
        const page = this.state.getValue();
        const component = page === null || page === void 0 ? void 0 : page.getComponent();
        if (!page || !component) {
            return;
        }
        return {
            component,
            page,
            $implicit: component,
            template: this.template,
        };
    }
    ngOnChanges(changes) {
        var _a, _b, _c, _d, _e, _f;
        if (changes.configuration || changes.page) {
            this.initialize((_a = changes.page) === null || _a === void 0 ? void 0 : _a.currentValue);
        }
        if (((_b = changes.stateKey) === null || _b === void 0 ? void 0 : _b.previousValue) && isPlatformServer(this.platform)) {
            if (changes.stateKey.currentValue && ((_c = this.transferState) === null || _c === void 0 ? void 0 : _c.hasKey(changes.stateKey.previousValue))) {
                (_d = this.transferState) === null || _d === void 0 ? void 0 : _d.set(changes.stateKey.currentValue, (_e = this.transferState) === null || _e === void 0 ? void 0 : _e.get(changes.stateKey.previousValue, undefined));
            }
            (_f = this.transferState) === null || _f === void 0 ? void 0 : _f.remove(changes.stateKey.previousValue);
        }
    }
    ngAfterContentChecked() {
        this.afterContentChecked$.next();
    }
    ngOnDestroy() {
        this.state.next(undefined);
        this.state.complete();
        this.afterContentChecked$.complete();
    }
    initialize(page) {
        var _a, _b, _c;
        if (this.stateKey && isPlatformBrowser(this.platform) && ((_a = this.transferState) === null || _a === void 0 ? void 0 : _a.hasKey(this.stateKey))) {
            page = page !== null && page !== void 0 ? page : (_b = this.transferState) === null || _b === void 0 ? void 0 : _b.get(this.stateKey, undefined);
            (_c = this.transferState) === null || _c === void 0 ? void 0 : _c.remove(this.stateKey);
        }
        const configuration = Object.assign({ httpClient: this.request }, this.configuration);
        const observable = page
            ? of(initialize(configuration, page))
            : from(initialize(configuration));
        observable.subscribe(state => {
            this.state.next(state);
            this.changeDetectorRef.detectChanges();
        });
    }
    request(...[{ data: body, headers, method, url }]) {
        return this.httpClient.request(method, url, {
            body,
            headers: headers,
            responseType: 'json'
        })
            .pipe(map(data => ({ data })))
            .toPromise();
    }
}
BrPageComponent.decorators = [
    { type: Component, args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'br-page',
                template: "<!--\n  Copyright 2020 Hippo B.V. (http://www.onehippo.com)\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n  -->\n\n<ng-template #brNode let-component let-template=\"template\">\n  <ng-container [brNode]=\"component\" [brNodeTemplate]=\"template\">\n    <ng-container [ngSwitch]=\"component | brNodeType\">\n      <ng-container *ngSwitchCase=\"'container-item'\" [brNodeContainerItem]=\"component\"></ng-container>\n      <ng-container *ngSwitchCase=\"'container'\" [brNodeContainer]=\"component\"></ng-container>\n      <ng-container *ngSwitchDefault [brNodeComponent]=\"component\"></ng-container>\n    </ng-container>\n  </ng-container>\n</ng-template>\n\n<ng-template *ngIf=\"context\" [ngTemplateOutlet]=\"brNode\" [ngTemplateOutletContext]=\"context\"></ng-template>\n"
            },] }
];
BrPageComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: HttpClient },
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: TransferState, decorators: [{ type: Optional }] }
];
BrPageComponent.propDecorators = {
    configuration: [{ type: Input }],
    mapping: [{ type: Input }],
    page: [{ type: Input }],
    stateKey: [{ type: Input }],
    state: [{ type: Output }],
    node: [{ type: ViewChild, args: ['brNode', { static: true },] }],
    template: [{ type: ContentChild, args: [TemplateRef, { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,