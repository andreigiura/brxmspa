/*
 * Copyright 2020 Hippo B.V. (http://www.onehippo.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, Input, Optional, TemplateRef, ViewContainerRef } from '@angular/core';
import { TYPE_MANAGE_MENU_BUTTON } from '@bloomreach/spa-sdk';
import { BrMetaDirective } from './br-meta.directive';
import { BrPageComponent } from './br-page/br-page.component';
/**
 * The button directive that opens a menu editor.
 */
export class BrManageMenuButtonDirective extends BrMetaDirective {
    constructor(container, template, page) {
        super(container, template);
        this.page = page;
    }
    ngOnChanges(changes) {
        var _a, _b;
        this.meta = (_b = (_a = this.page) === null || _a === void 0 ? void 0 : _a.state.getValue()) === null || _b === void 0 ? void 0 : _b.getButton(TYPE_MANAGE_MENU_BUTTON, this.menu);
        super.ngOnChanges(changes);
    }
}
BrManageMenuButtonDirective.decorators = [
    { type: Directive, args: [{ selector: '[brManageMenuButton]' },] }
];
BrManageMenuButtonDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: TemplateRef, decorators: [{ type: Optional }] },
    { type: BrPageComponent, decorators: [{ type: Optional }] }
];
BrManageMenuButtonDirective.propDecorators = {
    menu: [{ type: Input, args: ['brManageMenuButton',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnItbWFuYWdlLW1lbnUtYnV0dG9uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9zcmMvIiwic291cmNlcyI6WyJsaWIvYnItbWFuYWdlLW1lbnUtYnV0dG9uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FjRztBQUVILE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFhLFFBQVEsRUFBaUIsV0FBVyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BILE9BQU8sRUFBUSx1QkFBdUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFOUQ7O0dBRUc7QUFFSCxNQUFNLE9BQU8sMkJBQTRCLFNBQVEsZUFBZTtJQU05RCxZQUNFLFNBQTJCLEVBQ2YsUUFBNkIsRUFDckIsSUFBc0I7UUFFMUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUZQLFNBQUksR0FBSixJQUFJLENBQWtCO0lBRzVDLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBc0I7O1FBQ2hDLElBQUksQ0FBQyxJQUFJLGVBQUcsSUFBSSxDQUFDLElBQUksMENBQUUsS0FBSyxDQUFDLFFBQVEsNENBQUksU0FBUyxDQUFDLHVCQUF1QixFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV2RixLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzdCLENBQUM7OztZQW5CRixTQUFTLFNBQUMsRUFBRSxRQUFRLEVBQUUsc0JBQXNCLEVBQUU7OztZQVI2QixnQkFBZ0I7WUFBN0IsV0FBVyx1QkFpQnJFLFFBQVE7WUFkSixlQUFlLHVCQWVuQixRQUFROzs7bUJBTFYsS0FBSyxTQUFDLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBIaXBwbyBCLlYuIChodHRwOi8vd3d3Lm9uZWhpcHBvLmNvbSlcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE9uQ2hhbmdlcywgT3B0aW9uYWwsIFNpbXBsZUNoYW5nZXMsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNZW51LCBUWVBFX01BTkFHRV9NRU5VX0JVVFRPTiB9IGZyb20gJ0BibG9vbXJlYWNoL3NwYS1zZGsnO1xuaW1wb3J0IHsgQnJNZXRhRGlyZWN0aXZlIH0gZnJvbSAnLi9ici1tZXRhLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBCclBhZ2VDb21wb25lbnQgfSBmcm9tICcuL2JyLXBhZ2UvYnItcGFnZS5jb21wb25lbnQnO1xuXG4vKipcbiAqIFRoZSBidXR0b24gZGlyZWN0aXZlIHRoYXQgb3BlbnMgYSBtZW51IGVkaXRvci5cbiAqL1xuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW2JyTWFuYWdlTWVudUJ1dHRvbl0nIH0pXG5leHBvcnQgY2xhc3MgQnJNYW5hZ2VNZW51QnV0dG9uRGlyZWN0aXZlIGV4dGVuZHMgQnJNZXRhRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgLyoqXG4gICAqIFRoZSByZWxhdGVkIG1lbnUgbW9kZWwuXG4gICAqL1xuICBASW5wdXQoJ2JyTWFuYWdlTWVudUJ1dHRvbicpIG1lbnUhOiBNZW51O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGNvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcbiAgICBAT3B0aW9uYWwoKSB0ZW1wbGF0ZT86IFRlbXBsYXRlUmVmPG5ldmVyPixcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIHBhZ2U/OiBCclBhZ2VDb21wb25lbnQsXG4gICkge1xuICAgIHN1cGVyKGNvbnRhaW5lciwgdGVtcGxhdGUpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIHRoaXMubWV0YSA9IHRoaXMucGFnZT8uc3RhdGUuZ2V0VmFsdWUoKT8uZ2V0QnV0dG9uKFRZUEVfTUFOQUdFX01FTlVfQlVUVE9OLCB0aGlzLm1lbnUpO1xuXG4gICAgc3VwZXIubmdPbkNoYW5nZXMoY2hhbmdlcyk7XG4gIH1cbn1cbiJdfQ==