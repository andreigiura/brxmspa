/*
 * Copyright 2020 Hippo B.V. (http://www.onehippo.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ChangeDetectorRef, ComponentFactoryResolver, Directive, Injector, ViewContainerRef, } from '@angular/core';
import { BrContainerItemUndefinedComponent, } from './br-container-item-undefined/br-container-item-undefined.component';
import { BrNodeComponentDirective } from './br-node-component.directive';
import { BrNodeDirective } from './br-node.directive';
import { BrPageComponent } from './br-page/br-page.component';
export class BrNodeContainerItemDirective extends BrNodeComponentDirective {
    constructor(container, injector, componentFactoryResolver, node, page, changeDetectorRef) {
        super(container, injector, componentFactoryResolver, node, page);
        this.changeDetectorRef = changeDetectorRef;
        this.onUpdate = this.onUpdate.bind(this);
    }
    ngOnChanges(changes) {
        var _a, _b;
        (_b = (_a = changes.component) === null || _a === void 0 ? void 0 : _a.previousValue) === null || _b === void 0 ? void 0 : _b.off('update', this.onUpdate);
        super.ngOnChanges(changes);
        this.component.on('update', this.onUpdate);
    }
    ngOnDestroy() {
        this.component.off('update', this.onUpdate);
    }
    onUpdate() {
        var _a;
        this.changeDetectorRef.markForCheck();
        (_a = this.page.state.getValue()) === null || _a === void 0 ? void 0 : _a.sync();
    }
    getMapping() {
        const type = this.component.getType();
        if (type && type in this.page.mapping) {
            return this.page.mapping[type];
        }
        return BrContainerItemUndefinedComponent;
    }
}
BrNodeContainerItemDirective.decorators = [
    { type: Directive, args: [{
                selector: '[brNodeContainerItem]',
                inputs: ['component:brNodeContainerItem'],
            },] }
];
BrNodeContainerItemDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: BrNodeDirective },
    { type: BrPageComponent },
    { type: ChangeDetectorRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnItbm9kZS1jb250YWluZXItaXRlbS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vc3JjLyIsInNvdXJjZXMiOlsibGliL2JyLW5vZGUtY29udGFpbmVyLWl0ZW0uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBRUgsT0FBTyxFQUNMLGlCQUFpQixFQUNqQix3QkFBd0IsRUFDeEIsU0FBUyxFQUNULFFBQVEsRUFLUixnQkFBZ0IsR0FDakIsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUNMLGlDQUFpQyxHQUNsQyxNQUFNLHFFQUFxRSxDQUFDO0FBQzdFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFPOUQsTUFBTSxPQUFPLDRCQUNiLFNBQVEsd0JBQXVDO0lBRTdDLFlBQ0UsU0FBMkIsRUFDM0IsUUFBa0IsRUFDbEIsd0JBQWtELEVBQ2xELElBQXFCLEVBQ3JCLElBQXFCLEVBQ2IsaUJBQW9DO1FBRTVDLEtBQUssQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLHdCQUF3QixFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUZ6RCxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBSTVDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjs7UUFDaEMsWUFBQSxPQUFPLENBQUMsU0FBUywwQ0FBRSxhQUFhLDBDQUFFLEdBQUcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUUvRCxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTNCLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFTyxRQUFROztRQUNkLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN0QyxNQUFBLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSwwQ0FBRSxJQUFJLEdBQUc7SUFDckMsQ0FBQztJQUVTLFVBQVU7UUFDbEIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUV0QyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDckMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNoQztRQUVELE9BQU8saUNBQWlDLENBQUM7SUFDM0MsQ0FBQzs7O1lBN0NGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsdUJBQXVCO2dCQUNqQyxNQUFNLEVBQUUsQ0FBRSwrQkFBK0IsQ0FBRTthQUM1Qzs7O1lBZEMsZ0JBQWdCO1lBTGhCLFFBQVE7WUFGUix3QkFBd0I7WUFjakIsZUFBZTtZQUNmLGVBQWU7WUFoQnRCLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBIaXBwbyBCLlYuIChodHRwOi8vd3d3Lm9uZWhpcHBvLmNvbSlcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gIERpcmVjdGl2ZSxcbiAgSW5qZWN0b3IsXG4gIE9uQ2hhbmdlcyxcbiAgT25EZXN0cm95LFxuICBTaW1wbGVDaGFuZ2VzLFxuICBUeXBlLFxuICBWaWV3Q29udGFpbmVyUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRhaW5lckl0ZW0gfSBmcm9tICdAYmxvb21yZWFjaC9zcGEtc2RrJztcbmltcG9ydCB7XG4gIEJyQ29udGFpbmVySXRlbVVuZGVmaW5lZENvbXBvbmVudCxcbn0gZnJvbSAnLi9ici1jb250YWluZXItaXRlbS11bmRlZmluZWQvYnItY29udGFpbmVyLWl0ZW0tdW5kZWZpbmVkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBCck5vZGVDb21wb25lbnREaXJlY3RpdmUgfSBmcm9tICcuL2JyLW5vZGUtY29tcG9uZW50LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBCck5vZGVEaXJlY3RpdmUgfSBmcm9tICcuL2JyLW5vZGUuZGlyZWN0aXZlJztcbmltcG9ydCB7IEJyUGFnZUNvbXBvbmVudCB9IGZyb20gJy4vYnItcGFnZS9ici1wYWdlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBCclByb3BzIH0gZnJvbSAnLi9ici1wcm9wcy5tb2RlbCc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tick5vZGVDb250YWluZXJJdGVtXScsXG4gIGlucHV0czogWyAnY29tcG9uZW50OmJyTm9kZUNvbnRhaW5lckl0ZW0nIF0sIC8vIHRzbGludDpkaXNhYmxlLWxpbmU6IG5vLWlucHV0cy1tZXRhZGF0YS1wcm9wZXJ0eVxufSlcbmV4cG9ydCBjbGFzcyBCck5vZGVDb250YWluZXJJdGVtRGlyZWN0aXZlXG5leHRlbmRzIEJyTm9kZUNvbXBvbmVudERpcmVjdGl2ZTxDb250YWluZXJJdGVtPlxuaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIGNvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcbiAgICBpbmplY3RvcjogSW5qZWN0b3IsXG4gICAgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgbm9kZTogQnJOb2RlRGlyZWN0aXZlLFxuICAgIHBhZ2U6IEJyUGFnZUNvbXBvbmVudCxcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgKSB7XG4gICAgc3VwZXIoY29udGFpbmVyLCBpbmplY3RvciwgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBub2RlLCBwYWdlKTtcblxuICAgIHRoaXMub25VcGRhdGUgPSB0aGlzLm9uVXBkYXRlLmJpbmQodGhpcyk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgY2hhbmdlcy5jb21wb25lbnQ/LnByZXZpb3VzVmFsdWU/Lm9mZigndXBkYXRlJywgdGhpcy5vblVwZGF0ZSk7XG5cbiAgICBzdXBlci5uZ09uQ2hhbmdlcyhjaGFuZ2VzKTtcblxuICAgIHRoaXMuY29tcG9uZW50Lm9uKCd1cGRhdGUnLCB0aGlzLm9uVXBkYXRlKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuY29tcG9uZW50Lm9mZigndXBkYXRlJywgdGhpcy5vblVwZGF0ZSk7XG4gIH1cblxuICBwcml2YXRlIG9uVXBkYXRlKCk6IHZvaWQge1xuICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgdGhpcy5wYWdlLnN0YXRlLmdldFZhbHVlKCk/LnN5bmMoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRNYXBwaW5nKCk6IFR5cGU8QnJQcm9wcz4gfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IHR5cGUgPSB0aGlzLmNvbXBvbmVudC5nZXRUeXBlKCk7XG5cbiAgICBpZiAodHlwZSAmJiB0eXBlIGluIHRoaXMucGFnZS5tYXBwaW5nKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYWdlLm1hcHBpbmdbdHlwZV07XG4gICAgfVxuXG4gICAgcmV0dXJuIEJyQ29udGFpbmVySXRlbVVuZGVmaW5lZENvbXBvbmVudDtcbiAgfVxufVxuIl19