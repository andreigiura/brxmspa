/*
 * Copyright 2020 Hippo B.V. (http://www.onehippo.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive } from '@angular/core';
import { TYPE_CONTAINER_INLINE, TYPE_CONTAINER_NO_MARKUP, TYPE_CONTAINER_ORDERED_LIST, TYPE_CONTAINER_UNORDERED_LIST, } from '@bloomreach/spa-sdk';
import { BrContainerBoxComponent } from './br-container-box/br-container-box.component';
import { BrContainerInlineComponent } from './br-container-inline/br-container-inline.component';
import { BrContainerOrderedListComponent } from './br-container-ordered-list/br-container-ordered-list.component';
import { BrContainerUnorderedListComponent, } from './br-container-unordered-list/br-container-unordered-list.component';
import { BrNodeComponentDirective } from './br-node-component.directive';
export class BrNodeContainerDirective extends BrNodeComponentDirective {
    getMapping() {
        const type = this.component.getType();
        if (type && type in this.page.mapping) {
            return this.page.mapping[type];
        }
        switch (type) {
            case TYPE_CONTAINER_INLINE: return BrContainerInlineComponent;
            case TYPE_CONTAINER_ORDERED_LIST: return BrContainerOrderedListComponent;
            case TYPE_CONTAINER_UNORDERED_LIST: return BrContainerUnorderedListComponent;
            case TYPE_CONTAINER_NO_MARKUP: return;
            default: return BrContainerBoxComponent;
        }
    }
}
BrNodeContainerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[brNodeContainer]',
                inputs: ['component:brNodeContainer'],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnItbm9kZS1jb250YWluZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9ici1ub2RlLWNvbnRhaW5lci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7O0dBY0c7QUFFSCxPQUFPLEVBQUUsU0FBUyxFQUFRLE1BQU0sZUFBZSxDQUFDO0FBQ2hELE9BQU8sRUFFTCxxQkFBcUIsRUFDckIsd0JBQXdCLEVBQ3hCLDJCQUEyQixFQUMzQiw2QkFBNkIsR0FDOUIsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUN4RixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUNqRyxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxpRUFBaUUsQ0FBQztBQUNsSCxPQUFPLEVBQ0wsaUNBQWlDLEdBQ2xDLE1BQU0scUVBQXFFLENBQUM7QUFDN0UsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFPekUsTUFBTSxPQUFPLHdCQUF5QixTQUFRLHdCQUFtQztJQUNyRSxVQUFVO1FBQ2xCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFdEMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ3JDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDaEM7UUFFRCxRQUFRLElBQUksRUFBRTtZQUNaLEtBQUsscUJBQXFCLENBQUMsQ0FBQyxPQUFPLDBCQUEwQixDQUFDO1lBQzlELEtBQUssMkJBQTJCLENBQUMsQ0FBQyxPQUFPLCtCQUErQixDQUFDO1lBQ3pFLEtBQUssNkJBQTZCLENBQUMsQ0FBQyxPQUFPLGlDQUFpQyxDQUFDO1lBQzdFLEtBQUssd0JBQXdCLENBQUMsQ0FBQyxPQUFPO1lBQ3RDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sdUJBQXVCLENBQUM7U0FDekM7SUFDSCxDQUFDOzs7WUFuQkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxtQkFBbUI7Z0JBQzdCLE1BQU0sRUFBRSxDQUFFLDJCQUEyQixDQUFFO2FBQ3hDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDIwIEhpcHBvIEIuVi4gKGh0dHA6Ly93d3cub25laGlwcG8uY29tKVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRGlyZWN0aXZlLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBDb250YWluZXIsXG4gIFRZUEVfQ09OVEFJTkVSX0lOTElORSxcbiAgVFlQRV9DT05UQUlORVJfTk9fTUFSS1VQLFxuICBUWVBFX0NPTlRBSU5FUl9PUkRFUkVEX0xJU1QsXG4gIFRZUEVfQ09OVEFJTkVSX1VOT1JERVJFRF9MSVNULFxufSBmcm9tICdAYmxvb21yZWFjaC9zcGEtc2RrJztcbmltcG9ydCB7IEJyQ29udGFpbmVyQm94Q29tcG9uZW50IH0gZnJvbSAnLi9ici1jb250YWluZXItYm94L2JyLWNvbnRhaW5lci1ib3guY29tcG9uZW50JztcbmltcG9ydCB7IEJyQ29udGFpbmVySW5saW5lQ29tcG9uZW50IH0gZnJvbSAnLi9ici1jb250YWluZXItaW5saW5lL2JyLWNvbnRhaW5lci1pbmxpbmUuY29tcG9uZW50JztcbmltcG9ydCB7IEJyQ29udGFpbmVyT3JkZXJlZExpc3RDb21wb25lbnQgfSBmcm9tICcuL2JyLWNvbnRhaW5lci1vcmRlcmVkLWxpc3QvYnItY29udGFpbmVyLW9yZGVyZWQtbGlzdC5jb21wb25lbnQnO1xuaW1wb3J0IHtcbiAgQnJDb250YWluZXJVbm9yZGVyZWRMaXN0Q29tcG9uZW50LFxufSBmcm9tICcuL2JyLWNvbnRhaW5lci11bm9yZGVyZWQtbGlzdC9ici1jb250YWluZXItdW5vcmRlcmVkLWxpc3QuY29tcG9uZW50JztcbmltcG9ydCB7IEJyTm9kZUNvbXBvbmVudERpcmVjdGl2ZSB9IGZyb20gJy4vYnItbm9kZS1jb21wb25lbnQuZGlyZWN0aXZlJztcbmltcG9ydCB7IEJyUHJvcHMgfSBmcm9tICcuL2JyLXByb3BzLm1vZGVsJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2JyTm9kZUNvbnRhaW5lcl0nLFxuICBpbnB1dHM6IFsgJ2NvbXBvbmVudDpick5vZGVDb250YWluZXInIF0sIC8vIHRzbGludDpkaXNhYmxlLWxpbmU6IG5vLWlucHV0cy1tZXRhZGF0YS1wcm9wZXJ0eVxufSlcbmV4cG9ydCBjbGFzcyBCck5vZGVDb250YWluZXJEaXJlY3RpdmUgZXh0ZW5kcyBCck5vZGVDb21wb25lbnREaXJlY3RpdmU8Q29udGFpbmVyPiB7XG4gIHByb3RlY3RlZCBnZXRNYXBwaW5nKCk6IFR5cGU8QnJQcm9wcz4gfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IHR5cGUgPSB0aGlzLmNvbXBvbmVudC5nZXRUeXBlKCk7XG5cbiAgICBpZiAodHlwZSAmJiB0eXBlIGluIHRoaXMucGFnZS5tYXBwaW5nKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYWdlLm1hcHBpbmdbdHlwZV07XG4gICAgfVxuXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFRZUEVfQ09OVEFJTkVSX0lOTElORTogcmV0dXJuIEJyQ29udGFpbmVySW5saW5lQ29tcG9uZW50O1xuICAgICAgY2FzZSBUWVBFX0NPTlRBSU5FUl9PUkRFUkVEX0xJU1Q6IHJldHVybiBCckNvbnRhaW5lck9yZGVyZWRMaXN0Q29tcG9uZW50O1xuICAgICAgY2FzZSBUWVBFX0NPTlRBSU5FUl9VTk9SREVSRURfTElTVDogcmV0dXJuIEJyQ29udGFpbmVyVW5vcmRlcmVkTGlzdENvbXBvbmVudDtcbiAgICAgIGNhc2UgVFlQRV9DT05UQUlORVJfTk9fTUFSS1VQOiByZXR1cm47XG4gICAgICBkZWZhdWx0OiByZXR1cm4gQnJDb250YWluZXJCb3hDb21wb25lbnQ7XG4gICAgfVxuICB9XG59XG4iXX0=