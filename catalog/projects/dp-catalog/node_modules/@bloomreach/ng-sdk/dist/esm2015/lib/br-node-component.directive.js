/*
 * Copyright 2020 Hippo B.V. (http://www.onehippo.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ComponentFactoryResolver, Directive, Injector, ViewContainerRef, } from '@angular/core';
import { BrNodeDirective } from './br-node.directive';
import { BrPageComponent } from './br-page/br-page.component';
export class BrNodeComponentDirective {
    constructor(container, injector, componentFactoryResolver, node, page) {
        this.container = container;
        this.injector = injector;
        this.componentFactoryResolver = componentFactoryResolver;
        this.node = node;
        this.page = page;
    }
    ngOnChanges(changes) {
        var _a;
        (_a = this.clear) === null || _a === void 0 ? void 0 : _a.call(this);
        this.container.clear();
        const { head, tail } = this.render();
        this.clear = head && tail && this.component.getMeta().render(head, tail);
    }
    getMapping() {
        return this.page.mapping[this.component.getName()];
    }
    render() {
        if (this.node.template) {
            return this.renderTemplate();
        }
        const component = this.getMapping();
        if (!component) {
            return this.renderChildren();
        }
        return this.renderMapping(component);
    }
    renderTemplate() {
        // tslint:disable: no-non-null-assertion
        const embeddedViewRef = this.container.createEmbeddedView(this.node.template, {
            $implicit: this.component,
            component: this.component,
            page: this.page.state.getValue(),
        });
        // tslint:enable: no-non-null-assertion
        const [head] = embeddedViewRef.rootNodes;
        const [tail] = embeddedViewRef.rootNodes.slice(-1);
        return { head, tail };
    }
    renderChildren() {
        var _a, _b;
        const nodes = this.component.getChildren()
            .map(component => this.container.createEmbeddedView(this.page.node, {
            component,
            $implicit: component,
            page: this.page.state.getValue(),
        }))
            .flatMap(view => view.rootNodes);
        const head = (_a = nodes[0]) !== null && _a !== void 0 ? _a : this.container.element.nativeElement;
        const tail = (_b = nodes[nodes.length - 1]) !== null && _b !== void 0 ? _b : head;
        return { head, tail };
    }
    renderMapping(component) {
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);
        const componentRef = this.container.createComponent(componentFactory, undefined, this.injector);
        componentRef.instance.component = this.component;
        componentRef.instance.page = this.page.state.getValue();
        return {
            head: componentRef.location.nativeElement,
            tail: componentRef.location.nativeElement,
        };
    }
    ngOnDestroy() {
        var _a;
        (_a = this.clear) === null || _a === void 0 ? void 0 : _a.call(this);
        this.container.clear();
    }
}
BrNodeComponentDirective.decorators = [
    { type: Directive, args: [{
                selector: '[brNodeComponent]',
                inputs: ['component:brNodeComponent'],
            },] }
];
BrNodeComponentDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: BrNodeDirective },
    { type: BrPageComponent }
];
//# sourceMappingURL=data:application/json;base64,