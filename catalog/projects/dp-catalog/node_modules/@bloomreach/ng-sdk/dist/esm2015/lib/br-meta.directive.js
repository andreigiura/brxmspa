/*
 * Copyright 2020 Hippo B.V. (http://www.onehippo.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, Optional, TemplateRef, ViewContainerRef, } from '@angular/core';
export class BrMetaDirective {
    constructor(container, template) {
        this.container = container;
        this.template = template;
    }
    ngOnChanges(changes) {
        var _a, _b;
        (_a = this.clear) === null || _a === void 0 ? void 0 : _a.call(this);
        this.container.clear();
        const { head, tail } = this.render();
        this.clear = head && tail && ((_b = this.meta) === null || _b === void 0 ? void 0 : _b.render(head, tail));
    }
    ngOnDestroy() {
        var _a;
        (_a = this.clear) === null || _a === void 0 ? void 0 : _a.call(this);
        this.container.clear();
    }
    render() {
        if (!this.template) {
            return {
                head: this.container.element.nativeElement,
                tail: this.container.element.nativeElement,
            };
        }
        const embeddedViewRef = this.container.createEmbeddedView(this.template);
        const [head] = embeddedViewRef.rootNodes;
        const [tail] = embeddedViewRef.rootNodes.slice(-1);
        return { head, tail };
    }
}
BrMetaDirective.decorators = [
    { type: Directive }
];
BrMetaDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: TemplateRef, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnItbWV0YS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vc3JjLyIsInNvdXJjZXMiOlsibGliL2JyLW1ldGEuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBRUgsT0FBTyxFQUNMLFNBQVMsRUFHVCxRQUFRLEVBRVIsV0FBVyxFQUNYLGdCQUFnQixHQUNqQixNQUFNLGVBQWUsQ0FBQztBQUl2QixNQUFNLE9BQWdCLGVBQWU7SUFJbkMsWUFDVSxTQUEyQixFQUNmLFFBQTZCO1FBRHpDLGNBQVMsR0FBVCxTQUFTLENBQWtCO1FBQ2YsYUFBUSxHQUFSLFFBQVEsQ0FBcUI7SUFDaEQsQ0FBQztJQUVKLFdBQVcsQ0FBQyxPQUFzQjs7UUFDaEMsTUFBQSxJQUFJLENBQUMsS0FBSywrQ0FBVixJQUFJLEVBQVc7UUFDZixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRXZCLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxJQUFJLElBQUksV0FBSSxJQUFJLENBQUMsSUFBSSwwQ0FBRSxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksRUFBQyxDQUFDO0lBQzdELENBQUM7SUFFRCxXQUFXOztRQUNULE1BQUEsSUFBSSxDQUFDLEtBQUssK0NBQVYsSUFBSSxFQUFXO1FBQ2YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRU8sTUFBTTtRQUNaLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLE9BQU87Z0JBQ0wsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLGFBQWE7Z0JBQzFDLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxhQUFhO2FBQzNDLENBQUM7U0FDSDtRQUVELE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3pFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxlQUFlLENBQUMsU0FBUyxDQUFDO1FBQ3pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxlQUFlLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRW5ELE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDeEIsQ0FBQzs7O1lBcENGLFNBQVM7OztZQUpSLGdCQUFnQjtZQURoQixXQUFXLHVCQVlSLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMjAgSGlwcG8gQi5WLiAoaHR0cDovL3d3dy5vbmVoaXBwby5jb20pXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIE9uQ2hhbmdlcyxcbiAgT25EZXN0cm95LFxuICBPcHRpb25hbCxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgVGVtcGxhdGVSZWYsXG4gIFZpZXdDb250YWluZXJSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWV0YUNvbGxlY3Rpb24gfSBmcm9tICdAYmxvb21yZWFjaC9zcGEtc2RrJztcblxuQERpcmVjdGl2ZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQnJNZXRhRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICBwcm90ZWN0ZWQgbWV0YT86IE1ldGFDb2xsZWN0aW9uIHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIGNsZWFyPzogUmV0dXJuVHlwZTxNZXRhQ29sbGVjdGlvblsncmVuZGVyJ10+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgY29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgdGVtcGxhdGU/OiBUZW1wbGF0ZVJlZjxuZXZlcj4sXG4gICkge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgdGhpcy5jbGVhcj8uKCk7XG4gICAgdGhpcy5jb250YWluZXIuY2xlYXIoKTtcblxuICAgIGNvbnN0IHsgaGVhZCwgdGFpbCB9ID0gdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLmNsZWFyID0gaGVhZCAmJiB0YWlsICYmIHRoaXMubWV0YT8ucmVuZGVyKGhlYWQsIHRhaWwpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5jbGVhcj8uKCk7XG4gICAgdGhpcy5jb250YWluZXIuY2xlYXIoKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyKCkge1xuICAgIGlmICghdGhpcy50ZW1wbGF0ZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaGVhZDogdGhpcy5jb250YWluZXIuZWxlbWVudC5uYXRpdmVFbGVtZW50LFxuICAgICAgICB0YWlsOiB0aGlzLmNvbnRhaW5lci5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGNvbnN0IGVtYmVkZGVkVmlld1JlZiA9IHRoaXMuY29udGFpbmVyLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlKTtcbiAgICBjb25zdCBbaGVhZF0gPSBlbWJlZGRlZFZpZXdSZWYucm9vdE5vZGVzO1xuICAgIGNvbnN0IFt0YWlsXSA9IGVtYmVkZGVkVmlld1JlZi5yb290Tm9kZXMuc2xpY2UoLTEpO1xuXG4gICAgcmV0dXJuIHsgaGVhZCwgdGFpbCB9O1xuICB9XG59XG4iXX0=