import { AfterContentChecked, ChangeDetectorRef, NgZone, OnChanges, OnDestroy, SimpleChanges, TemplateRef, Type } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { StateKey, TransferState } from '@angular/platform-browser';
import { BehaviorSubject } from 'rxjs';
import { Configuration, Page, PageModel } from '@bloomreach/spa-sdk';
import { BrComponentContext } from '../br-component.directive';
import { BrProps } from '../br-props.model';
interface BrNodeContext extends BrComponentContext {
    template?: TemplateRef<BrComponentContext>;
}
/**
 * The brXM page.
 */
export declare class BrPageComponent implements AfterContentChecked, OnChanges, OnDestroy {
    private changeDetectorRef;
    private httpClient;
    private platform;
    private transferState?;
    /**
     * The configuration of the SPA SDK.
     * @see https://www.npmjs.com/package/@bloomreach/spa-sdk#configuration
     */
    configuration: Omit<Configuration, 'httpClient'>;
    /**
     * The brXM and Angular components mapping.
     */
    mapping: Record<string, Type<BrProps>>;
    /**
     * The pre-initialized page instance or prefetched page model.
     * Mostly this property should be used to transfer state from the server-side to the client-side.
     */
    page?: Page | PageModel;
    /**
     * The TransferState key is used to transfer the state from the server-side to the client-side.
     * By default, it equals to `brPage`.
     * If `false` is passed then the state transferring feature will be disabled.
     */
    stateKey: StateKey<PageModel | undefined> | false;
    /**
     * The current state of the page component.
     */
    state: BehaviorSubject<Page | undefined>;
    node: TemplateRef<BrNodeContext>;
    private template?;
    private afterContentChecked$;
    constructor(changeDetectorRef: ChangeDetectorRef, httpClient: HttpClient, zone: NgZone, platform: any, transferState?: TransferState | undefined);
    get context(): BrNodeContext | undefined;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterContentChecked(): void;
    ngOnDestroy(): void;
    private initialize;
    private request;
}
export {};
