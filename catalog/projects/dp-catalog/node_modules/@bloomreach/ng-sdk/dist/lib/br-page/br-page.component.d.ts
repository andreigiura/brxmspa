import { AfterContentChecked, ChangeDetectorRef, NgZone, OnChanges, OnDestroy, SimpleChanges, TemplateRef, Type } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { StateKey, TransferState } from '@angular/platform-browser';
import { BehaviorSubject } from 'rxjs';
import { Configuration, Page, PageModel } from '@bloomreach/spa-sdk';
import { BrComponentContext } from '../br-component.directive';
import { BrProps } from '../br-props.model';
import * as ɵngcc0 from '@angular/core';
interface BrNodeContext extends BrComponentContext {
    template?: TemplateRef<BrComponentContext>;
}
/**
 * The brXM page.
 */
export declare class BrPageComponent implements AfterContentChecked, OnChanges, OnDestroy {
    private changeDetectorRef;
    private httpClient;
    private platform;
    private transferState?;
    /**
     * The configuration of the SPA SDK.
     * @see https://www.npmjs.com/package/@bloomreach/spa-sdk#configuration
     */
    configuration: Omit<Configuration, 'httpClient'>;
    /**
     * The brXM and Angular components mapping.
     */
    mapping: Record<string, Type<BrProps>>;
    /**
     * The pre-initialized page instance or prefetched page model.
     * Mostly this property should be used to transfer state from the server-side to the client-side.
     */
    page?: Page | PageModel;
    /**
     * The TransferState key is used to transfer the state from the server-side to the client-side.
     * By default, it equals to `brPage`.
     * If `false` is passed then the state transferring feature will be disabled.
     */
    stateKey: StateKey<PageModel | undefined> | false;
    /**
     * The current state of the page component.
     */
    state: BehaviorSubject<Page | undefined>;
    node: TemplateRef<BrNodeContext>;
    private template?;
    private afterContentChecked$;
    constructor(changeDetectorRef: ChangeDetectorRef, httpClient: HttpClient, zone: NgZone, platform: any, transferState?: TransferState | undefined);
    get context(): BrNodeContext | undefined;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterContentChecked(): void;
    ngOnDestroy(): void;
    private initialize;
    private request;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BrPageComponent, [null, null, null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BrPageComponent, "br-page", never, { "mapping": "mapping"; "stateKey": "stateKey"; "configuration": "configuration"; "page": "page"; }, { "state": "state"; }, ["template"], never>;
}
export {};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnItcGFnZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiYnItcGFnZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFPQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE2Q0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlckNvbnRlbnRDaGVja2VkLCBDaGFuZ2VEZXRlY3RvclJlZiwgTmdab25lLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgU2ltcGxlQ2hhbmdlcywgVGVtcGxhdGVSZWYsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBTdGF0ZUtleSwgVHJhbnNmZXJTdGF0ZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBDb25maWd1cmF0aW9uLCBQYWdlLCBQYWdlTW9kZWwgfSBmcm9tICdAYmxvb21yZWFjaC9zcGEtc2RrJztcbmltcG9ydCB7IEJyQ29tcG9uZW50Q29udGV4dCB9IGZyb20gJy4uL2JyLWNvbXBvbmVudC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQnJQcm9wcyB9IGZyb20gJy4uL2JyLXByb3BzLm1vZGVsJztcbmludGVyZmFjZSBCck5vZGVDb250ZXh0IGV4dGVuZHMgQnJDb21wb25lbnRDb250ZXh0IHtcbiAgICB0ZW1wbGF0ZT86IFRlbXBsYXRlUmVmPEJyQ29tcG9uZW50Q29udGV4dD47XG59XG4vKipcbiAqIFRoZSBiclhNIHBhZ2UuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEJyUGFnZUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudENoZWNrZWQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdG9yUmVmO1xuICAgIHByaXZhdGUgaHR0cENsaWVudDtcbiAgICBwcml2YXRlIHBsYXRmb3JtO1xuICAgIHByaXZhdGUgdHJhbnNmZXJTdGF0ZT87XG4gICAgLyoqXG4gICAgICogVGhlIGNvbmZpZ3VyYXRpb24gb2YgdGhlIFNQQSBTREsuXG4gICAgICogQHNlZSBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9AYmxvb21yZWFjaC9zcGEtc2RrI2NvbmZpZ3VyYXRpb25cbiAgICAgKi9cbiAgICBjb25maWd1cmF0aW9uOiBPbWl0PENvbmZpZ3VyYXRpb24sICdodHRwQ2xpZW50Jz47XG4gICAgLyoqXG4gICAgICogVGhlIGJyWE0gYW5kIEFuZ3VsYXIgY29tcG9uZW50cyBtYXBwaW5nLlxuICAgICAqL1xuICAgIG1hcHBpbmc6IFJlY29yZDxzdHJpbmcsIFR5cGU8QnJQcm9wcz4+O1xuICAgIC8qKlxuICAgICAqIFRoZSBwcmUtaW5pdGlhbGl6ZWQgcGFnZSBpbnN0YW5jZSBvciBwcmVmZXRjaGVkIHBhZ2UgbW9kZWwuXG4gICAgICogTW9zdGx5IHRoaXMgcHJvcGVydHkgc2hvdWxkIGJlIHVzZWQgdG8gdHJhbnNmZXIgc3RhdGUgZnJvbSB0aGUgc2VydmVyLXNpZGUgdG8gdGhlIGNsaWVudC1zaWRlLlxuICAgICAqL1xuICAgIHBhZ2U/OiBQYWdlIHwgUGFnZU1vZGVsO1xuICAgIC8qKlxuICAgICAqIFRoZSBUcmFuc2ZlclN0YXRlIGtleSBpcyB1c2VkIHRvIHRyYW5zZmVyIHRoZSBzdGF0ZSBmcm9tIHRoZSBzZXJ2ZXItc2lkZSB0byB0aGUgY2xpZW50LXNpZGUuXG4gICAgICogQnkgZGVmYXVsdCwgaXQgZXF1YWxzIHRvIGBiclBhZ2VgLlxuICAgICAqIElmIGBmYWxzZWAgaXMgcGFzc2VkIHRoZW4gdGhlIHN0YXRlIHRyYW5zZmVycmluZyBmZWF0dXJlIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAgICovXG4gICAgc3RhdGVLZXk6IFN0YXRlS2V5PFBhZ2VNb2RlbCB8IHVuZGVmaW5lZD4gfCBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgcGFnZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgc3RhdGU6IEJlaGF2aW9yU3ViamVjdDxQYWdlIHwgdW5kZWZpbmVkPjtcbiAgICBub2RlOiBUZW1wbGF0ZVJlZjxCck5vZGVDb250ZXh0PjtcbiAgICBwcml2YXRlIHRlbXBsYXRlPztcbiAgICBwcml2YXRlIGFmdGVyQ29udGVudENoZWNrZWQkO1xuICAgIGNvbnN0cnVjdG9yKGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZiwgaHR0cENsaWVudDogSHR0cENsaWVudCwgem9uZTogTmdab25lLCBwbGF0Zm9ybTogYW55LCB0cmFuc2ZlclN0YXRlPzogVHJhbnNmZXJTdGF0ZSB8IHVuZGVmaW5lZCk7XG4gICAgZ2V0IGNvbnRleHQoKTogQnJOb2RlQ29udGV4dCB8IHVuZGVmaW5lZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudENoZWNrZWQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHByaXZhdGUgaW5pdGlhbGl6ZTtcbiAgICBwcml2YXRlIHJlcXVlc3Q7XG59XG5leHBvcnQge307XG4iXX0=