import { isPlatformServer, isPlatformBrowser, CommonModule } from '@angular/common';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { Component, Input, ChangeDetectionStrategy, HostBinding, Directive, ChangeDetectorRef, NgZone, Inject, PLATFORM_ID, Optional, Output, ViewChild, ContentChild, TemplateRef, ViewContainerRef, Pipe, Injector, ComponentFactoryResolver, NgModule } from '@angular/core';
import { isPage, destroy, initialize, isComponent, TYPE_MANAGE_CONTENT_BUTTON, TYPE_MANAGE_MENU_BUTTON, isContainerItem, isContainer, TYPE_CONTAINER_NO_MARKUP, TYPE_CONTAINER_UNORDERED_LIST, TYPE_CONTAINER_ORDERED_LIST, TYPE_CONTAINER_INLINE } from '@bloomreach/spa-sdk';
import { makeStateKey, TransferState } from '@angular/platform-browser';
import { BehaviorSubject, Subject, of, from } from 'rxjs';
import { pairwise, pluck, filter, switchMap, take, mapTo, map } from 'rxjs/operators';

/*
 * Copyright 2020 Hippo B.V. (http://www.onehippo.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class BrContainerItemUndefinedComponent {
}
BrContainerItemUndefinedComponent.decorators = [
    { type: Component, args: [{
                selector: 'br-container-item-undefined',
                template: "<!--\n  Copyright 2020 Hippo B.V. (http://www.onehippo.com)\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n  -->\n\nComponent \"{{ component.getType() }}\" is not defined.\n"
            },] }
];
BrContainerItemUndefinedComponent.propDecorators = {
    component: [{ type: Input }]
};

/*
 * Copyright 2020 Hippo B.V. (http://www.onehippo.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class BrContainerBoxComponent {
    get isPreview() {
        var _a;
        return (_a = this.page) === null || _a === void 0 ? void 0 : _a.isPreview();
    }
}
BrContainerBoxComponent.decorators = [
    { type: Component, args: [{
                selector: 'div.br-container-box',
                template: "<!--\n  Copyright 2020 Hippo B.V. (http://www.onehippo.com)\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n  -->\n\n<div *ngFor=\"let child of component.getChildren()\" [ngClass]=\"{'hst-container-item': page.isPreview()}\">\n  <ng-container [brComponent]=\"child\"></ng-container>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
BrContainerBoxComponent.propDecorators = {
    component: [{ type: Input }],
    page: [{ type: Input }],
    isPreview: [{ type: HostBinding, args: ['class.hst-container',] }]
};

/*
 * Copyright 2020 Hippo B.V. (http://www.onehippo.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class BrContainerInlineComponent {
    get isPreview() {
        var _a;
        return (_a = this.page) === null || _a === void 0 ? void 0 : _a.isPreview();
    }
}
BrContainerInlineComponent.decorators = [
    { type: Component, args: [{
                selector: 'div.br-container-inline',
                template: "<!--\n  Copyright 2020 Hippo B.V. (http://www.onehippo.com)\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n  -->\n\n<span *ngFor=\"let child of component.getChildren()\" [ngClass]=\"{'hst-container-item': page.isPreview()}\">\n  <ng-container [brComponent]=\"child\"></ng-container>\n</span>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
BrContainerInlineComponent.propDecorators = {
    component: [{ type: Input }],
    page: [{ type: Input }],
    isPreview: [{ type: HostBinding, args: ['class.hst-container',] }]
};

/*
 * Copyright 2020 Hippo B.V. (http://www.onehippo.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class BrContainerOrderedListComponent {
    get isPreview() {
        var _a;
        return (_a = this.page) === null || _a === void 0 ? void 0 : _a.isPreview();
    }
}
BrContainerOrderedListComponent.decorators = [
    { type: Component, args: [{
                selector: 'ol.br-container-ordered-list',
                template: "<!--\n  Copyright 2020 Hippo B.V. (http://www.onehippo.com)\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n  -->\n\n<li *ngFor=\"let child of component.getChildren()\" [ngClass]=\"{'hst-container-item': page.isPreview()}\">\n  <ng-container [brComponent]=\"child\"></ng-container>\n</li>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
BrContainerOrderedListComponent.propDecorators = {
    component: [{ type: Input }],
    page: [{ type: Input }],
    isPreview: [{ type: HostBinding, args: ['class.hst-container',] }]
};

/*
 * Copyright 2020 Hippo B.V. (http://www.onehippo.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class BrContainerUnorderedListComponent {
    get isPreview() {
        var _a;
        return (_a = this.page) === null || _a === void 0 ? void 0 : _a.isPreview();
    }
}
BrContainerUnorderedListComponent.decorators = [
    { type: Component, args: [{
                selector: 'ul.br-container-unordered-list',
                template: "<!--\n  Copyright 2020 Hippo B.V. (http://www.onehippo.com)\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n  -->\n\n<li *ngFor=\"let child of component.getChildren()\" [ngClass]=\"{'hst-container-item': page.isPreview()}\">\n  <ng-container [brComponent]=\"child\"></ng-container>\n</li>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
BrContainerUnorderedListComponent.propDecorators = {
    component: [{ type: Input }],
    page: [{ type: Input }],
    isPreview: [{ type: HostBinding, args: ['class.hst-container',] }]
};

/*
 * Copyright 2020 Hippo B.V. (http://www.onehippo.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class BrNodeDirective {
}
BrNodeDirective.decorators = [
    { type: Directive, args: [{
                selector: '[brNode]',
            },] }
];
BrNodeDirective.propDecorators = {
    component: [{ type: Input, args: ['brNode',] }],
    template: [{ type: Input, args: ['brNodeTemplate',] }]
};

/*
 * Copyright 2020 Hippo B.V. (http://www.onehippo.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * The brXM page.
 */
class BrPageComponent {
    constructor(changeDetectorRef, httpClient, zone, platform, transferState) {
        this.changeDetectorRef = changeDetectorRef;
        this.httpClient = httpClient;
        this.platform = platform;
        this.transferState = transferState;
        /**
         * The brXM and Angular components mapping.
         */
        this.mapping = {};
        /**
         * The TransferState key is used to transfer the state from the server-side to the client-side.
         * By default, it equals to `brPage`.
         * If `false` is passed then the state transferring feature will be disabled.
         */
        this.stateKey = makeStateKey('brPage');
        /**
         * The current state of the page component.
         */
        this.state = new BehaviorSubject(undefined);
        this.afterContentChecked$ = new Subject();
        this.request = this.request.bind(this);
        this.state.pipe(pairwise(), pluck(0), filter(isPage))
            .subscribe(destroy);
        this.state.pipe(filter(isPage), switchMap((page) => this.afterContentChecked$.pipe(take(1), mapTo(page))))
            .subscribe((page) => zone.runOutsideAngular(() => page.sync()));
        this.state.pipe(filter(() => isPlatformServer(this.platform)), filter(isPage))
            .subscribe((page) => { var _a; return this.stateKey && ((_a = this.transferState) === null || _a === void 0 ? void 0 : _a.set(this.stateKey, page.toJSON())); });
    }
    get context() {
        const page = this.state.getValue();
        const component = page === null || page === void 0 ? void 0 : page.getComponent();
        if (!page || !component) {
            return;
        }
        return {
            component,
            page,
            $implicit: component,
            template: this.template,
        };
    }
    ngOnChanges(changes) {
        var _a, _b, _c, _d, _e, _f;
        if (changes.configuration || changes.page) {
            this.initialize((_a = changes.page) === null || _a === void 0 ? void 0 : _a.currentValue);
        }
        if (((_b = changes.stateKey) === null || _b === void 0 ? void 0 : _b.previousValue) && isPlatformServer(this.platform)) {
            if (changes.stateKey.currentValue && ((_c = this.transferState) === null || _c === void 0 ? void 0 : _c.hasKey(changes.stateKey.previousValue))) {
                (_d = this.transferState) === null || _d === void 0 ? void 0 : _d.set(changes.stateKey.currentValue, (_e = this.transferState) === null || _e === void 0 ? void 0 : _e.get(changes.stateKey.previousValue, undefined));
            }
            (_f = this.transferState) === null || _f === void 0 ? void 0 : _f.remove(changes.stateKey.previousValue);
        }
    }
    ngAfterContentChecked() {
        this.afterContentChecked$.next();
    }
    ngOnDestroy() {
        this.state.next(undefined);
        this.state.complete();
        this.afterContentChecked$.complete();
    }
    initialize(page) {
        var _a, _b, _c;
        if (this.stateKey && isPlatformBrowser(this.platform) && ((_a = this.transferState) === null || _a === void 0 ? void 0 : _a.hasKey(this.stateKey))) {
            page = page !== null && page !== void 0 ? page : (_b = this.transferState) === null || _b === void 0 ? void 0 : _b.get(this.stateKey, undefined);
            (_c = this.transferState) === null || _c === void 0 ? void 0 : _c.remove(this.stateKey);
        }
        const configuration = Object.assign({ httpClient: this.request }, this.configuration);
        const observable = page
            ? of(initialize(configuration, page))
            : from(initialize(configuration));
        observable.subscribe(state => {
            this.state.next(state);
            this.changeDetectorRef.detectChanges();
        });
    }
    request(...[{ data: body, headers, method, url }]) {
        return this.httpClient.request(method, url, {
            body,
            headers: headers,
            responseType: 'json'
        })
            .pipe(map(data => ({ data })))
            .toPromise();
    }
}
BrPageComponent.decorators = [
    { type: Component, args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'br-page',
                template: "<!--\n  Copyright 2020 Hippo B.V. (http://www.onehippo.com)\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n  -->\n\n<ng-template #brNode let-component let-template=\"template\">\n  <ng-container [brNode]=\"component\" [brNodeTemplate]=\"template\">\n    <ng-container [ngSwitch]=\"component | brNodeType\">\n      <ng-container *ngSwitchCase=\"'container-item'\" [brNodeContainerItem]=\"component\"></ng-container>\n      <ng-container *ngSwitchCase=\"'container'\" [brNodeContainer]=\"component\"></ng-container>\n      <ng-container *ngSwitchDefault [brNodeComponent]=\"component\"></ng-container>\n    </ng-container>\n  </ng-container>\n</ng-template>\n\n<ng-template *ngIf=\"context\" [ngTemplateOutlet]=\"brNode\" [ngTemplateOutletContext]=\"context\"></ng-template>\n"
            },] }
];
BrPageComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: HttpClient },
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: TransferState, decorators: [{ type: Optional }] }
];
BrPageComponent.propDecorators = {
    configuration: [{ type: Input }],
    mapping: [{ type: Input }],
    page: [{ type: Input }],
    stateKey: [{ type: Input }],
    state: [{ type: Output }],
    node: [{ type: ViewChild, args: ['brNode', { static: true },] }],
    template: [{ type: ContentChild, args: [TemplateRef, { static: true },] }]
};

/*
 * Copyright 2020 Hippo B.V. (http://www.onehippo.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * The brXM component.
 */
class BrComponentDirective {
    constructor(container, template, node, page) {
        this.container = container;
        this.template = template;
        this.node = node;
        this.page = page;
    }
    ngOnChanges(changes) {
        if (!changes.component || changes.component.isFirstChange()) {
            return;
        }
        this.ngOnDestroy();
        this.ngOnInit();
    }
    ngOnDestroy() {
        this.container.clear();
    }
    ngOnInit() {
        var _a, _b;
        const page = (_a = this.page) === null || _a === void 0 ? void 0 : _a.state.getValue();
        if (!page) {
            return;
        }
        // tslint:disable: no-non-null-assertion
        (_b = this.components) === null || _b === void 0 ? void 0 : _b.forEach((component) => this.container.createEmbeddedView(this.page.node, {
            component,
            page,
            $implicit: component,
            template: this.template,
        }));
        // tslint:enable: no-non-null-assertion
    }
    get context() {
        var _a, _b;
        if (this.node) {
            return this.node.component;
        }
        return (_b = (_a = this.page) === null || _a === void 0 ? void 0 : _a.state.getValue()) === null || _b === void 0 ? void 0 : _b.getComponent();
    }
    get components() {
        var _a, _b;
        if (isComponent(this.component)) {
            return [this.component];
        }
        if (!this.component) {
            return (_a = this.context) === null || _a === void 0 ? void 0 : _a.getChildren();
        }
        const component = (_b = this.context) === null || _b === void 0 ? void 0 : _b.getComponent(...this.component.split('/'));
        return component && [component];
    }
}
BrComponentDirective.decorators = [
    { type: Directive, args: [{ selector: '[brComponent]' },] }
];
BrComponentDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: TemplateRef, decorators: [{ type: Optional }] },
    { type: BrNodeDirective, decorators: [{ type: Optional }] },
    { type: BrPageComponent, decorators: [{ type: Optional }] }
];
BrComponentDirective.propDecorators = {
    component: [{ type: Input, args: ['brComponent',] }]
};

/*
 * Copyright 2020 Hippo B.V. (http://www.onehippo.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class BrMetaDirective {
    constructor(container, template) {
        this.container = container;
        this.template = template;
    }
    ngOnChanges(changes) {
        var _a, _b;
        (_a = this.clear) === null || _a === void 0 ? void 0 : _a.call(this);
        this.container.clear();
        const { head, tail } = this.render();
        this.clear = head && tail && ((_b = this.meta) === null || _b === void 0 ? void 0 : _b.render(head, tail));
    }
    ngOnDestroy() {
        var _a;
        (_a = this.clear) === null || _a === void 0 ? void 0 : _a.call(this);
        this.container.clear();
    }
    render() {
        if (!this.template) {
            return {
                head: this.container.element.nativeElement,
                tail: this.container.element.nativeElement,
            };
        }
        const embeddedViewRef = this.container.createEmbeddedView(this.template);
        const [head] = embeddedViewRef.rootNodes;
        const [tail] = embeddedViewRef.rootNodes.slice(-1);
        return { head, tail };
    }
}
BrMetaDirective.decorators = [
    { type: Directive }
];
BrMetaDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: TemplateRef, decorators: [{ type: Optional }] }
];

/*
 * Copyright 2020 Hippo B.V. (http://www.onehippo.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * The button direcrtive that opens for editing a content.
 */
class BrManageContentButtonDirective extends BrMetaDirective {
    constructor(container, template, page) {
        super(container, template);
        this.page = page;
    }
    ngOnChanges(changes) {
        var _a, _b;
        this.meta = (_b = (_a = this.page) === null || _a === void 0 ? void 0 : _a.state.getValue()) === null || _b === void 0 ? void 0 : _b.getButton(TYPE_MANAGE_CONTENT_BUTTON, this);
        super.ngOnChanges(changes);
    }
}
BrManageContentButtonDirective.decorators = [
    { type: Directive, args: [{ selector: '[brManageContentButton]' },] }
];
BrManageContentButtonDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: TemplateRef, decorators: [{ type: Optional }] },
    { type: BrPageComponent, decorators: [{ type: Optional }] }
];
BrManageContentButtonDirective.propDecorators = {
    content: [{ type: Input, args: ['brManageContentButton',] }],
    documentTemplateQuery: [{ type: Input }],
    folderTemplateQuery: [{ type: Input }],
    path: [{ type: Input }],
    parameter: [{ type: Input }],
    relative: [{ type: Input }],
    root: [{ type: Input }]
};

/*
 * Copyright 2020 Hippo B.V. (http://www.onehippo.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * The button directive that opens a menu editor.
 */
class BrManageMenuButtonDirective extends BrMetaDirective {
    constructor(container, template, page) {
        super(container, template);
        this.page = page;
    }
    ngOnChanges(changes) {
        var _a, _b;
        this.meta = (_b = (_a = this.page) === null || _a === void 0 ? void 0 : _a.state.getValue()) === null || _b === void 0 ? void 0 : _b.getButton(TYPE_MANAGE_MENU_BUTTON, this.menu);
        super.ngOnChanges(changes);
    }
}
BrManageMenuButtonDirective.decorators = [
    { type: Directive, args: [{ selector: '[brManageMenuButton]' },] }
];
BrManageMenuButtonDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: TemplateRef, decorators: [{ type: Optional }] },
    { type: BrPageComponent, decorators: [{ type: Optional }] }
];
BrManageMenuButtonDirective.propDecorators = {
    menu: [{ type: Input, args: ['brManageMenuButton',] }]
};

/*
 * Copyright 2020 Hippo B.V. (http://www.onehippo.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class BrNodeTypePipe {
    transform(component) {
        if (isContainerItem(component)) {
            return 'container-item';
        }
        if (isContainer(component)) {
            return 'container';
        }
        return 'component';
    }
}
BrNodeTypePipe.decorators = [
    { type: Pipe, args: [{ name: 'brNodeType' },] }
];

/*
 * Copyright 2020 Hippo B.V. (http://www.onehippo.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class BrNodeComponentDirective {
    constructor(container, injector, componentFactoryResolver, node, page) {
        this.container = container;
        this.injector = injector;
        this.componentFactoryResolver = componentFactoryResolver;
        this.node = node;
        this.page = page;
    }
    ngOnChanges(changes) {
        var _a;
        (_a = this.clear) === null || _a === void 0 ? void 0 : _a.call(this);
        this.container.clear();
        const { head, tail } = this.render();
        this.clear = head && tail && this.component.getMeta().render(head, tail);
    }
    getMapping() {
        return this.page.mapping[this.component.getName()];
    }
    render() {
        if (this.node.template) {
            return this.renderTemplate();
        }
        const component = this.getMapping();
        if (!component) {
            return this.renderChildren();
        }
        return this.renderMapping(component);
    }
    renderTemplate() {
        // tslint:disable: no-non-null-assertion
        const embeddedViewRef = this.container.createEmbeddedView(this.node.template, {
            $implicit: this.component,
            component: this.component,
            page: this.page.state.getValue(),
        });
        // tslint:enable: no-non-null-assertion
        const [head] = embeddedViewRef.rootNodes;
        const [tail] = embeddedViewRef.rootNodes.slice(-1);
        return { head, tail };
    }
    renderChildren() {
        var _a, _b;
        const nodes = this.component.getChildren()
            .map(component => this.container.createEmbeddedView(this.page.node, {
            component,
            $implicit: component,
            page: this.page.state.getValue(),
        }))
            .flatMap(view => view.rootNodes);
        const head = (_a = nodes[0]) !== null && _a !== void 0 ? _a : this.container.element.nativeElement;
        const tail = (_b = nodes[nodes.length - 1]) !== null && _b !== void 0 ? _b : head;
        return { head, tail };
    }
    renderMapping(component) {
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);
        const componentRef = this.container.createComponent(componentFactory, undefined, this.injector);
        componentRef.instance.component = this.component;
        componentRef.instance.page = this.page.state.getValue();
        return {
            head: componentRef.location.nativeElement,
            tail: componentRef.location.nativeElement,
        };
    }
    ngOnDestroy() {
        var _a;
        (_a = this.clear) === null || _a === void 0 ? void 0 : _a.call(this);
        this.container.clear();
    }
}
BrNodeComponentDirective.decorators = [
    { type: Directive, args: [{
                selector: '[brNodeComponent]',
                inputs: ['component:brNodeComponent'],
            },] }
];
BrNodeComponentDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: BrNodeDirective },
    { type: BrPageComponent }
];

/*
 * Copyright 2020 Hippo B.V. (http://www.onehippo.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class BrNodeContainerDirective extends BrNodeComponentDirective {
    getMapping() {
        const type = this.component.getType();
        if (type && type in this.page.mapping) {
            return this.page.mapping[type];
        }
        switch (type) {
            case TYPE_CONTAINER_INLINE: return BrContainerInlineComponent;
            case TYPE_CONTAINER_ORDERED_LIST: return BrContainerOrderedListComponent;
            case TYPE_CONTAINER_UNORDERED_LIST: return BrContainerUnorderedListComponent;
            case TYPE_CONTAINER_NO_MARKUP: return;
            default: return BrContainerBoxComponent;
        }
    }
}
BrNodeContainerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[brNodeContainer]',
                inputs: ['component:brNodeContainer'],
            },] }
];

/*
 * Copyright 2020 Hippo B.V. (http://www.onehippo.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class BrNodeContainerItemDirective extends BrNodeComponentDirective {
    constructor(container, injector, componentFactoryResolver, node, page, changeDetectorRef) {
        super(container, injector, componentFactoryResolver, node, page);
        this.changeDetectorRef = changeDetectorRef;
        this.onUpdate = this.onUpdate.bind(this);
    }
    ngOnChanges(changes) {
        var _a, _b;
        (_b = (_a = changes.component) === null || _a === void 0 ? void 0 : _a.previousValue) === null || _b === void 0 ? void 0 : _b.off('update', this.onUpdate);
        super.ngOnChanges(changes);
        this.component.on('update', this.onUpdate);
    }
    ngOnDestroy() {
        this.component.off('update', this.onUpdate);
    }
    onUpdate() {
        var _a;
        this.changeDetectorRef.markForCheck();
        (_a = this.page.state.getValue()) === null || _a === void 0 ? void 0 : _a.sync();
    }
    getMapping() {
        const type = this.component.getType();
        if (type && type in this.page.mapping) {
            return this.page.mapping[type];
        }
        return BrContainerItemUndefinedComponent;
    }
}
BrNodeContainerItemDirective.decorators = [
    { type: Directive, args: [{
                selector: '[brNodeContainerItem]',
                inputs: ['component:brNodeContainerItem'],
            },] }
];
BrNodeContainerItemDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: BrNodeDirective },
    { type: BrPageComponent },
    { type: ChangeDetectorRef }
];

/*
 * Copyright 2020 Hippo B.V. (http://www.onehippo.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class BrSdkModule {
}
BrSdkModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    BrComponentDirective,
                    BrContainerBoxComponent,
                    BrContainerInlineComponent,
                    BrContainerOrderedListComponent,
                    BrContainerUnorderedListComponent,
                    BrContainerItemUndefinedComponent,
                    BrManageContentButtonDirective,
                    BrManageMenuButtonDirective,
                    BrNodeComponentDirective,
                    BrNodeContainerDirective,
                    BrNodeContainerItemDirective,
                    BrNodeDirective,
                    BrNodeTypePipe,
                    BrPageComponent,
                ],
                entryComponents: [
                    BrContainerBoxComponent,
                    BrContainerInlineComponent,
                    BrContainerOrderedListComponent,
                    BrContainerUnorderedListComponent,
                    BrContainerItemUndefinedComponent,
                ],
                exports: [
                    BrComponentDirective,
                    BrManageContentButtonDirective,
                    BrManageMenuButtonDirective,
                    BrPageComponent,
                ],
                imports: [CommonModule, HttpClientModule],
            },] }
];

/*
 * Copyright 2020 Hippo B.V. (http://www.onehippo.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Copyright 2020 Hippo B.V. (http://www.onehippo.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Generated bundle index. Do not edit.
 */

export { BrComponentDirective, BrManageContentButtonDirective, BrManageMenuButtonDirective, BrPageComponent, BrSdkModule, BrNodeDirective as ɵa, BrContainerBoxComponent as ɵb, BrContainerInlineComponent as ɵc, BrContainerOrderedListComponent as ɵd, BrContainerUnorderedListComponent as ɵe, BrContainerItemUndefinedComponent as ɵf, BrMetaDirective as ɵg, BrNodeComponentDirective as ɵh, BrNodeContainerDirective as ɵi, BrNodeContainerItemDirective as ɵj, BrNodeTypePipe as ɵk };
//# sourceMappingURL=bloomreach-ng-sdk.js.map
